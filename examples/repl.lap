; Simple REPL implementation in LAP with multiline support
; This demonstrates bootstrapping - the REPL is written in LAP itself

(println "=== LAP REPL (multiline) ===")
(println "Type expressions to evaluate")
(println "Type 'quit' to exit")
(println "Type 'help' for help")

; Define the REPL loop
(define (repl-loop)
  (print "> ")
  (let ((input (read-line)))
    (let ((trimmed-input (str-trim input)))
      (if (str= trimmed-input "")
          (repl-loop)
          (if (str= trimmed-input "quit")
              (println "Goodbye!")
              (let ((result (eval input)))
                (if (= result 0)
                    (println "Expression evaluated successfully")
                    (println result))
                (repl-loop)))))))

; Start the REPL
(repl-loop)