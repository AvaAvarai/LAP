; Lambda expressions demo
; Shows anonymous functions and lambda definitions

(println "Lambda expressions demo:")

; Anonymous function application
(println "((lambda (x) (* x x)) 5)=" ((lambda (x) (* x x)) 5))

; Define functions using lambda
(define square (lambda (x) (* x x)))
(define cube (lambda (x) (* x x x)))
(define add (lambda (x y) (+ x y)))
(define multiply (lambda (x y) (* x y)))

(println "square(4)=" (square 4))
(println "cube(3)=" (cube 3))
(println "add(10, 20)=" (add 10 20))
(println "multiply(6, 7)=" (multiply 6 7))

; Simple lambda with conditional
(define abs (lambda (x) (if (< x 0) (- 0 x) x)))
(println "abs(-5)=" (abs (- 0 5)))
(println "abs(3)=" (abs 3))